name: ElasticSpells CICD Learning
run-name: ${{ github.actor }} is running ElastiSpells workflow
on: 
  push:
    branches: 
      - master
  pull_request:
    branches: [ $default-branch ]                    # Makes it run when a pull request is created that will merge _into_ the default branch (typically, master)

jobs:



  my-job-that-checks-node-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '14'
      - run: node -v




  test-backend:
    runs-on: ubuntu-latest
    needs: my-job-that-checks-node-version
    defaults:
      run:
        working-directory: ./backend/                                # prepending run commands with `cd backend` also works, but ofc this is nicer.
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'npm' # TODO find out what this does exactly
          cache-dependency-path: backend/package-lock.json          # Needed when your package-lock.json is not in the root
      - run: node -v
      - name: 'Run npm install (npm clean-install)'
        run: npm ci                                                 # `npm ci` or `npm clean-install` is a comand similar to `npm install` designed for CI/CD
      - run: npm run build --if-present
      - name: Run backend tests
        run: npm run test
      - name: Try Deploying                                         # do this in a separate job? why yes, why not.
        run: echo 'TODO deploying this thing!'




  test-frontend:
    runs-on: ubuntu-latest
    needs: my-job-that-checks-node-version
    defaults:
      run:
        working-directory: ./frontend/elasticspells/
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'npm'
          cache-dependency-path: frontend/elasticspells/package-lock.json           # Needed when your package-lock.json is not in the root
      - name: 'Run npm install (npm clean-install)'
        run: npm clean-install
      - run: npm run lint
      - run: npm run build
      - name: Run Jest unit tests
        run: npm run test:unit
      - name: Try Deploying                                         # do this in a separate job? why yes? why not?
        run: echo 'TODO deploying this thing!'